# ========================
# HelixLang Standard Library: base.hl
# Core primitives, constants, and universal functions
# Auto-imported or injected into every HelixLang program
# ========================

# ------------------------
# Primitive Type Constructors
# ------------------------

fn int(x) = __to_int(x)
fn float(x) = __to_float(x)
fn str(x) = __to_str(x)
fn bool(x) = __to_bool(x)

# ------------------------
# Math Functions
# ------------------------

fn abs(x) = if x < 0 then -x else x
fn sqrt(x) = __math_sqrt(x)
fn pow(x, y) = __math_pow(x, y)
fn round(x) = __math_round(x)
fn min(a, b) = if a < b then a else b
fn max(a, b) = if a > b then a else b

# ------------------------
# Constants
# ------------------------

let PI = 3.1415926535
let E = 2.7182818284

let TRUE = bool(1)
let FALSE = bool(0)
let NULL = __null()

# ------------------------
# String Manipulation
# ------------------------

fn split(s, delim) = __str_split(s, delim)
fn join(arr, delim) = __str_join(arr, delim)
fn replace(s, old, new) = __str_replace(s, old, new)
fn substring(s, start, length) = __str_sub(s, start, length)

# Advanced string functions (optional):
fn starts_with(s, prefix) = substring(s, 0, len(prefix)) == prefix
fn ends_with(s, suffix) = substring(s, len(s) - len(suffix), len(suffix)) == suffix

# ------------------------
# Collection Utilities
# ------------------------

fn len(x) = __len(x)

fn map(f, arr) = {
    let out = []
    for i in 0..len(arr) {
        out.append(f(arr[i]))
    }
    return out
}

fn reduce(f, arr, init) = {
    let acc = init
    for i in 0..len(arr) {
        acc = f(acc, arr[i])
    }
    return acc
}

fn filter(f, arr) = {
    let out = []
    for i in 0..len(arr) {
        if f(arr[i]) {
            out.append(arr[i])
        }
    }
    return out
}

# ------------------------
# Type Reflection Utilities
# ------------------------

fn typeof(x) = __typeof(x)
fn is_null(x) = (x == NULL)
fn is_number(x) = typeof(x) == "int" or typeof(x) == "float"
fn is_string(x) = typeof(x) == "str"
fn is_bool(x) = typeof(x) == "bool"
fn is_array(x) = typeof(x) == "array"

# ------------------------
# Assertions and Safety
# ------------------------

fn assert(cond, msg) = {
    if not cond {
        __panic("Assertion failed: " + msg)
    }
}

# ------------------------
# Utility Constructs
# ------------------------

# Range constructor (lazy iterable not implemented yet)
fn range(start, end) = {
    let r = []
    let i = start
    while i < end {
        r.append(i)
        i = i + 1
    }
    return r
}

# Enumerate helper
fn enumerate(arr) = {
    let result = []
    for i in 0..len(arr) {
        result.append([i, arr[i]])
    }
    return result
}

# ------------------------
# String Debug Printing (optional)
# ------------------------

fn print(x) = __print(__to_str(x))

# ------------------------
# Metadata
# ------------------------

let BASE_STD_VERSION = "1.0.0"
let LAST_UPDATED = "2025-05-24"

# End of base.hl
